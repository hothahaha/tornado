// SPDX-License-Identifier: MIT
pragma solidity 0.8.24;

contract Hasher {
    uint256 p =
        21888242871839275222246405745257275088548364400416034343698204186575808495617;
    uint256[20] c = [
        0,
        71113055393130051120584658220538339069267680798453431538437024917524608434023,
        49097451445679040012946712343910120599556642253861176652496773253736422634946,
        45381721764106386545327217529790619686913936352123233432732118864335523759148,
        29998706657658331725470173789004483592512521627018118985604597070978981480556,
        14419489634579323718898830127769964661163659913501741884719475146002888224153,
        45610622679346492088025079073227688333119192180950922084159757188552003194184,
        28672115599952868617879872006920311747790837790026636525396795913587010456182,
        32044802481021844188072592430259454789348491746024679767369768681938561376735,
        15734751865113234544161218559889691217283364744368676189178921073974269496118,
        35174801358115185320612729050617476365956190812848769838888457219203559316022,
        87005204532359361867831437483112775737212833300637444620680331522105422952085,
        80905155998948368777026191311883241737108119842058511635945085445230875423828,
        86257268453821698492468475915098708917124776105137056398525164323259841189580,
        74002631874815947286478631140384146583940209065493626507318456297620669364058,
        96186080507501396675778339233390263347215869743297334285270507347746716212508,
        20669399919016250925130711542995757816960708013755521719798865498842883012059,
        24381080584820964052403872135814065345053774089413711827303100296349915270725,
        104268477533677448091512585134298354938785842667632685512739082915816441031222,
        96500015015742235830340049442690118188866997038858488452908813758683084449691
    ];

    function MiMC5Fesital(
        uint256 _iL,
        uint256 _iR,
        uint256 _k
    ) internal view returns (uint256 oL, uint256 oR) {
        uint8 nRounds = 20;

        uint256 lastL = _iL;
        uint256 lastR = _iR;

        uint256 mask;
        uint256 mask2;
        uint256 mask4;
        uint256 temp;

        for (uint8 i = 0; i < nRounds; i++) {
            mask = addmod(lastR, _k, p);
            mask = addmod(mask, c[i], p);
            mask2 = mulmod(mask, mask, p);
            mask4 = mulmod(mask2, mask2, p);
            mask = mulmod(mask4, mask, p);

            temp = lastR;
            lastR = addmod(lastL, mask, p);
            lastL = temp;
        }
        return (lastL, lastR);
    }

    function MiMC5Sponge(
        uint256[2] memory _ins,
        uint256 _k
    ) external view returns (uint256 h) {
        uint256 lastR = 0;
        uint256 lastC = 0;

        for (uint8 i = 0; i < _ins.length; i++) {
            lastR = addmod(lastR, _ins[i], p);
            (lastR, lastC) = MiMC5Fesital(lastR, lastC, _k);
        }

        h = lastR;
    }
}
